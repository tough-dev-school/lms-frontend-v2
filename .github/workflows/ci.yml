name: CI

on:
  push:
  issue_comment:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || (github.event.issue.pull_request && contains(github.event.comment.body, '/ci')) }}
    steps:
      - name: Checkout 🛎
        uses: actions/checkout@v3

      - name: Setup node 🏗
        uses: actions/setup-node@v3
        id: setup-node
        with:
          node-version-file: '.node-version'

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-v1-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('.node-version') }}

      - name: Install dependencies 👨🏻‍💻
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --no-audit --include=dev

      - name: Run linter 👀
        run: npm run lint

      - name: Run typecheck ✅
        run: npm run type-check

      - name: Build 😎
        run: npm run build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  unittest:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout 🛎
        uses: actions/checkout@v3

      - name: Setup node 🏗
        uses: actions/setup-node@v3
        with:
          node-version-file: '.node-version'

      - name: Restore cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          fail-on-cache-miss: true
          path: node_modules
          key: ${{ runner.os }}-v1-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('.node-version') }}

      - name: Run unit tests 🧪
        run: npm run test:unit

  build-docker-image:
    needs: unittest
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read image identifiers
        id: image
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ github.repository }}

      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ steps.image.outputs.lowercase }}:latest
            ghcr.io/${{ steps.image.outputs.lowercase }}:${{ github.sha }}
          build-args: |
            - RELEASE=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Read image identifiers
        id: image
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ github.repository }}

      - name: Update production image
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: circle
          key: ${{ secrets.DEPLOY_KEY }}
          script: docker service update app_lms --image ghcr.io/${{ steps.image.outputs.lowercase }}:${{ github.sha }} --with-registry-auth
